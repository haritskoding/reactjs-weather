{"version":3,"sources":["components/DisplayWeather.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWeather","props","data","iconurl","cod","weather","icon","className","Fragment","name","sys","country","Date","toLocaleTimeString","Math","floor","main","temp","src","alt","srcset","description","temp_max","temp_min","humidity","pressure","visibility","wind","speed","deg","sunrise","sunset","message","Weather","useState","setWeather","city","form","setForm","APIKEY","e","a","preventDefault","alert","fetch","then","res","json","handleChange","target","value","type","placeholder","onChange","onClick","weatherData","undefined","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a0c2c63c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./displayweather.css\";\r\nfunction DisplayWeather(props) {\r\n  const { data } = props;\r\n  const iconurl =\r\n    \"http://openweathermap.org/img/w/\" +\r\n    `${data.cod != 404 ? data.weather[0].icon : null}` +\r\n    \".png\";\r\n  return (\r\n    <div className=\"displayweather\">\r\n      {data.cod != 404 ? (\r\n        <React.Fragment>\r\n          <div className=\"maincard\">\r\n            <span className=\"cardtitle\">\r\n              {data.name} , {data.sys.country}. Weather\r\n            </span>\r\n            <span className=\"cardsubtitle\">\r\n              As of {new Date().toLocaleTimeString()}\r\n            </span>\r\n\r\n            <h1>\r\n              {\" \"}\r\n              {Math.floor(data.main.temp - 273.15)}\r\n              <sup>o</sup>\r\n            </h1>\r\n            <span className=\"weather-main\">{data.weather[0].main}</span>\r\n            <img className=\"weather-icon\" src={iconurl} alt=\"\" srcset=\"\" />\r\n            <span className=\"weather-description\">\r\n              {\" \"}\r\n              {data.weather[0].description}\r\n            </span>\r\n          </div>\r\n          <div className=\"weatherdetails\">\r\n            <div className=\"section1\">\r\n              <table>\r\n                <tr>\r\n                  <td>\r\n                    <h4>High/Low</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {Math.floor(data.main.temp_max - 273.15)}/\r\n                      {Math.floor(data.main.temp_min - 273.15)}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Humidity</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.main.humidity} %</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Pressure</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.main.pressure} hPa</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Visibility</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{data.visibility / 1000} Km</span>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"section2\">\r\n              <table>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Wind</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>{Math.floor((data.wind.speed * 18) / 5)} km/hr</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Wind Direction</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {data.wind.deg}\r\n                      <sup>o</sup> deg\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunrise</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <h4>Sunset</h4>\r\n                  </td>\r\n                  <td>\r\n                    <span>\r\n                      {new Date(data.sys.sunset * 1000).toLocaleTimeString()}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        <div className=\"maincard\">\r\n          <h2>{data.message}</h2>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DisplayWeather;\r\n","import React, { useState } from \"react\";\r\nimport DisplayWeather from \"./DisplayWeather\";\r\nimport \"./weather.css\";\r\n\r\nfunction Weather() {\r\n  const [weather, setWeather] = useState([]);\r\n  const [form, setForm] = useState({\r\n    city: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n  const APIKEY = \"7ecadf40dbfb5ffcbb59af9c6444b682\";\r\n  async function weatherData(e) {\r\n    e.preventDefault();\r\n    if (form.city == \"\") {\r\n      alert(\"Add values\");\r\n    } else {\r\n      const data = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${form.city},${form.country}&APPID=${APIKEY}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => data);\r\n\r\n      setWeather({ data: data });\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n\r\n    if (name == \"city\") {\r\n      setForm({ ...form, city: value });\r\n    }\r\n    if (name == \"country\") {\r\n      setForm({ ...form, country: value });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"weather\">\r\n      <span className=\"title\">Weather App</span>\r\n      <br />\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"city\"\r\n          name=\"city\"\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        &nbsp; &nbsp; &nbsp;&nbsp;\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Country\"\r\n          name=\"country\"\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        <button className=\"getweather\" onClick={(e) => weatherData(e)}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n\r\n      {/* {console.log(weather)} */}\r\n      {weather.data != undefined ? (\r\n        <div>\r\n          <DisplayWeather data={weather.data} />\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Weather />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}